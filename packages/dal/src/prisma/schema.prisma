// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                     Int              @id @default(autoincrement())
  email                  String           @unique
  name                   String           @default("Anonymous")
  passwordHash           String
  phone                  String?          @unique @db.VarChar(11)
  createdAt              DateTime         @default(now())
  lastLoginAt            DateTime         @default(now())
  isBlocked              Boolean          @default(false)
  role                   UserRole         @default(USER)
  resetChances           Int              @default(0)
  subscriptions          Subscription[]
  createdInvitationCodes InvitationCode[] @relation("CreatedBy")
  invitedBy              InvitationCode?  @relation("InvitedBy", fields: [invitedById], references: [id], onUpdate: NoAction, onDelete: NoAction)
  invitedById            Int?
  targetAuditLogs        AuditLog[]       @relation("TargetUser")
  performedAuditLogs     AuditLog[]       @relation("PerformedBy")
  sessionTokens          SessionToken[]
  totalGPTTokens         Int              @default(0)

  @@index([email])
  @@index([invitedById])
}

model InvitationCode {
  id            Int            @id @default(autoincrement())
  code          String         @unique
  codeType      InvitationType @default(USER_REQUESTED)
  isActivated   Boolean        @default(true)
  createdAt     DateTime       @default(now())
  createdBy     User           @relation("CreatedBy", fields: [createdById], references: [id])
  createdById   Int
  acceptedUsers User[]         @relation("InvitedBy")

  @@index([code])
  @@index([createdById])
}

model Subscription {
  id       Int              @id @default(autoincrement())
  plan     SubscriptionPlan @default(FREE)
  startAt  DateTime         @default(now())
  endAt    DateTime? // Forever if empty
  user     User             @relation(fields: [userId], references: [id])
  userId   Int
  price    Decimal          @default(0) // In CNY
  payments Payment[]

  @@index([userId])
}

model AuditLog {
  id            Int      @id @default(autoincrement())
  action        String
  targetUser    User     @relation("TargetUser", fields: [targetUserId], references: [id])
  targetUserId  Int
  description   String?
  createdAt     DateTime @default(now())
  performedBy   User     @relation("PerformedBy", fields: [performedById], references: [id])
  performedById Int

  @@index([targetUserId])
  @@index([performedById])
}

model Payment {
  id             Int           @id @default(autoincrement())
  amount         Decimal // In CNY
  status         PaymentStatus
  type           PaymentType
  createdAt      DateTime      @default(now())
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int

  @@index([subscriptionId])
}

model SessionToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String

  @@index([userEmail])
}

enum UserRole {
  USER // Normal Users
  MOD // Mod: Sales and Audit
  ADMIN // SuperAdmin
}

enum InvitationType {
  INTERNAL_EVENT
  USER_REQUESTED
}

enum SubscriptionPlan {
  FREE // GPT-4 10/h
  PRO // GPT-3.5/GPT-4 50/3h
  PRO_PLUS // GPT-4 GPT-3.5 no limit after 100/3h limit speed
}

enum PaymentType {
  WECHAT
  MANUAL
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
